stages:
  - lint
  - test
  - setup-db
  - build

lint-rust:
  stage: lint
  image: rust:latest
  before_script:
    - rustc --version
    - cargo --version
    - rustup component add clippy rustfmt
  script:
    - cargo fmt -- --check
    - cargo clippy --all-targets -- -D clippy::all

lint-python:
  stage: lint
  image: python:3.11
  script:
    - pip install poetry
    - poetry install
    - poetry run black visualize

test-rust:
  stage: test
  image: rust:latest
  before_script:
    - cargo install cargo-nextest
  script:
    - cargo nextest run --all
  parallel: 4

postgres-auth:
  stage: setup-db
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: quant_trader
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
  image: postgres
  script:
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

build-rust:
  stage: build
  image: rust:latest
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: quant_trader
    POSTGRES_PORT: 5432
    POSTGRES_HOST: postgres
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    DATABASE_URL: "postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DB"
  before_script:
    - cargo install diesel_cli
  script:
    - DATABASE_URL=$DATABASE_URL diesel database reset
    - cargo build --release --verbose --jobs 1
  parallel: 4
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
